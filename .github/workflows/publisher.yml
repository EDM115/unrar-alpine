name: "Publish new UnRAR release"

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
      binary_version:
        required: true
        type: string
      release_date:
        required: true
        type: string
      sha256_src:
        required: true
        type: string
      sha256_binary_x64:
        required: true
        type: string
      sha256_binary_arm64:
        required: true
        type: string
      src_filename:
        required: true
        type: string
      url:
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Download x64 ZIP
        uses: actions/download-artifact@v4
        with:
          name: unrar-x64
          path: artifacts

      - name: Download arm64 ZIP
        uses: actions/download-artifact@v4
        with:
          name: unrar-arm64
          path: artifacts

      - name: Download source archive
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.src_filename }}
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          body: |
            | Field                              | Value                                              |
            |------------------------------------|----------------------------------------------------|
            | Version (from URL)                 | ${{ github.event.inputs.version }}                 |
            | Binary version (from executable)   | ${{ github.event.inputs.binary_version }}          |
            | Release date                       | ${{ github.event.inputs.release_date }}            |
            | SHA256 (source archive)            | ${{ github.event.inputs.sha256_src }}              |
            | SHA256 (binary x64)                | ${{ github.event.inputs.sha256_binary_x64 }}       |
            | SHA256 (binary ARM64)              | ${{ github.event.inputs.sha256_binary_arm64 }}     |
          files: |
            artifacts/unrar-x64.zip
            artifacts/unrar-arm64.zip
            artifacts/${{ github.event.inputs.src_filename }}

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get the latest ID
        id: get_latest_id
        run: |
          latest_id=$(jq '.[-1].id' versions.json)
          if [ -z "$latest_id" ]; then
            latest_id=1
          else
            latest_id=$((latest_id + 1))
          fi
          echo "latest_id=$latest_id" >> $GITHUB_OUTPUT

      - name: Update versions.json
        run: |
            version_exists=$(jq --arg version "${{ github.event.inputs.version }}" 'map(select(.version == $version)) | length' versions.json)
            if [ "$version_exists" -eq 0 ]; then
              jq --arg id "${{ steps.get_latest_id.outputs.latest_id }}" \
                --arg url "${{ github.event.inputs.url }}" \
                --arg version "${{ github.event.inputs.version }}" \
                '. += [{"id": ($id | tonumber), "url": $url, "version": $version}]' \
                versions.json > tmp.json && mv tmp.json versions.json
            else
              echo "Version already exists, skipping update"
            fi
      
      - name: Update last_processed_version
        run: |
          id=$(jq --arg version "${{ github.event.inputs.version }}" '.[] | select(.version == $version) | .id' versions.json)
          if [ -z "$id" ]; then
            echo "Version not found in versions.json"
            exit 1
          fi
          echo "$id" > last_processed_version
          echo "" >> last_processed_version

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        run: |
          git add versions.json last_processed_version
          git commit -m "chore: new processed version (${{ github.event.inputs.version }}) [skip ci]" || echo "No changes to commit"
          git push
