name: "Publish new UnRAR release"

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
      binary_version:
        required: true
        type: string
      release_date:
        required: true
        type: string
      run_id:
        required: true
        type: string
      sha256_src:
        required: true
        type: string
      sha256_binary:
        required: true
        type: string
      src_filename:
        required: true
        type: string
      url:
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-slim
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      actions: write
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Mark workspace as safe for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Download binary ZIP
        uses: actions/download-artifact@v6
        with:
          name: unrar
          github-token: ${{ secrets.PAT }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.inputs.run_id }}
          path: artifacts
          merge-multiple: true

      - name: Download source archive
        uses: actions/download-artifact@v6
        with:
          name: ${{ github.event.inputs.src_filename }}
          github-token: ${{ secrets.PAT }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.inputs.run_id }}
          path: artifacts
          merge-multiple: true

      - name: Extract binary ZIP
        id: extract
        run: |
          unzip -o artifacts/unrar.zip -d artifacts/unrar
          rm artifacts/unrar.zip
          chmod +x artifacts/unrar/unrar
          # get unrar size
          size=$(stat -c %s artifacts/unrar/unrar)
          echo "size=$size" >> $GITHUB_OUTPUT
          date=$(date +"%Y-%m-%d")
          echo "date=$date" >> $GITHUB_OUTPUT

      - name: Create release
        run: |
          cat > RELEASE_NOTES.md <<'EOF' 
          # [UnRAR - Alpine Linux build](https://github.com/EDM115/unrar-alpine)
          ## Version ${{ github.event.inputs.version }}
          ### Build date : ${{ steps.extract.outputs.date }}
          
          ---
          
          | Field                            | Value                                       |
          | :------------------------------- | :------------------------------------------ |
          | Version (from URL)               | `${{ github.event.inputs.version }}`        |
          | Binary version (from executable) | `${{ github.event.inputs.binary_version }}` |
          | Release date                     | `${{ github.event.inputs.release_date }}`   |
          | SHA256 (source archive)          | `${{ github.event.inputs.sha256_src }}`     |
          | SHA256 (binary)                  | `${{ github.event.inputs.sha256_binary }}`  |
          | Size in bytes (binary)           | `${{ steps.extract.outputs.size }}`         |
          
          ---
          
          > [!NOTE]  
          > ping @EDM115
          EOF
          gh release create "${{ github.event.inputs.version }}" \
            --draft \
            --title "${{ github.event.inputs.version }}" \
            --notes-file RELEASE_NOTES.md
          gh release upload "${{ github.event.inputs.version }}" \
            "artifacts/unrar/unrar" \
            "artifacts/${{ github.event.inputs.src_filename }}"
          gh release edit "${{ github.event.inputs.version }}" --draft=false

      - name: Cleanup
        run: |
          rm RELEASE_NOTES.md
          rm -rf artifacts

      - name: Update version files
        run: |
          cd "${GITHUB_WORKSPACE}"
          gh workflow run updater.yml \
            -f version="${{ github.event.inputs.version }}" \
            -f url="${{ github.event.inputs.url }}"
